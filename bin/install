#!/usr/bin/env bash

set -eu -o pipefail

# shellcheck source=../lib/utils.sh
source "$(dirname "$0")/../lib/utils.sh"

install_nodejs() {
  local install_type="$1" version="$2" install_path="$3"
  local args=()

  version=$(resolve_version "$version")

  if [ "$install_type" = ref ] || [ "${ASDF_NODEJS_FORCE_COMPILE-}" ]; then
    args+=(-c)
  fi

  try_to_update_nodebuild

  NODE_BUILD_CACHE_PATH="${NODE_BUILD_CACHE_PATH:-$ASDF_DOWNLOAD_PATH}" \
    nodebuild_wrapped ${args+"${args[@]}"} "$version" "$install_path"
}

_run_for_installation() {
  (
    if [ -r "$ASDF_NODEJS_PLUGIN_DIR/bin/exec-env" ]; then
      . "$ASDF_NODEJS_PLUGIN_DIR/bin/exec-env"
    fi

    env PATH="$ASDF_INSTALL_PATH/bin:$PATH" "$@"
  )
}


install_default_npm_packages() {
  local pkgs_file="${ASDF_NPM_DEFAULT_PACKAGES_FILE:=$HOME/.default-npm-packages}"

  if ! [ -f "$pkgs_file" ]; then
    return 0
  fi

  npm_install() {
    printf "$(colored $CYAN "\nRunning the folowing install command:\n")"
    printf "$(colored $GREEN "  \$ npm install -g %s\n")" "$*"

    _run_for_installation npm install -g "$@"
  }

  local args=()
  local line="" aux=()
  while read -r line; do
    if [[ -z "$line" ]]; then
      continue
    fi

    pkg_lines+=("$line")

    case "$line" in
      *' -'*|-*)
        # Installing previously read packages
        if [ "${#args[@]}" -gt 0 ]; then
          npm_install "${args[@]}"
        fi

        # Read current line as a command by itself
        args=()
        IFS=' ' read -ra args <<< "$line"

        npm_install "${args[@]}"
        args=()
        ;;
      *)
        # Accumulate packages to install
        IFS=' ' read -ra aux <<< "$line"
        args+=("${aux[@]}")
        ;;
    esac
  done < <(grep -v '^\s*#' "$pkgs_file")

  if [ "${#args[@]}" -gt 0 ]; then
    npm_install "${args[@]}"
  fi
}

enable_corepack() {
  if [ "${ASDF_NODEJS_AUTO_ENABLE_COREPACK-}" ]; then
    _run_for_installation corepack enable
  fi
}

install_nodejs "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"

install_default_npm_packages \
  || printf "\n$(colored $YELLOW WARNING:) An error occurred when installing the default npm packages, but Node's installation succeeded\n"

enable_corepack \
  || printf "\n$(colored $YELLOW WARNING:) An error occurred while enabling corepack for this version\n"

asdf reshim "$(plugin_name)" "$ASDF_INSTALL_VERSION"
